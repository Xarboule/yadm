#+TITLE: Emacs Configuration
#+AUTHOR: Rémi Dulong
#+COMMENT: Mostly inspired by Harry R. Schwartz, github.com/hrs/dotfiles
#+OPTIONS: toc:nil num:nil

* Configure =use-package=
  
  Set repositories :
  
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))  
  #+end_src

I use =use-package= to install and configure my packages. My =init.el= includes the
  initial setup for =package.el= and ensures that =use-package= is installed, since I
  wanna do that right away.

  This makes sure that =use-package= will install the package if it's not already
  available. It also means that I should be able to open Emacs for the first time
  on a fresh Debian box and have my whole environment automatically installed. I'm
  not /totally/ sure about that, but we're gettin' close.

#+begin_src emacs-lisp
    (require 'use-package-ensure)
    (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

Disable deprecation warnings about =cl=. The =cl= library has been deprecated, but
lots of packages still use it. I can't control that, but I can disable the
warnings.

#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

* Utility

	#+begin_src emacs-lisp
		(defun hrs/append-to-path (path)
			"Add a path both to the $PATH variable and to Emacs' exec-path."
			(setenv "PATH" (concat (getenv "PATH") ":" path))
			(add-to-list 'exec-path path))
	#+end_src

* UI preferences

** Fonts
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font .  "Inconsolata-16" ))
  (set-face-attribute 'default t :font  "Inconsolata-16" )
#+end_src
** Line numbers

#+begin_src emacs-lisp
  (require 'display-line-numbers)

  (defcustom display-line-numbers-exempt-modes
    '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
    "Major modes on which to disable line numbers."
    :group 'display-line-numbers
    :type 'list
    :version "green")

  (defun display-line-numbers--turn-on ()
    "Turn on line numbers except for certain major modes.
  Exempt major modes are defined in `display-line-numbers-exempt-modes'."
    (unless (or (minibufferp)
                (member major-mode display-line-numbers-exempt-modes))
      (display-line-numbers-mode)))

  (global-display-line-numbers-mode)

#+end_src

** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.
Only for emacs GUI.

#+begin_src emacs-lisp
  ;(tool-bar-mode 0)
  ;(menu-bar-mode 0)
  ;(scroll-bar-mode -1)
#+end_src

There's a tiny scroll bar that appears in the minibuffer window. This disables
that:

#+begin_src emacs-lisp
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src
** Load up a theme

Zenburn theme.
   
#+begin_src emacs-lisp
  (use-package zenburn-theme)
  (load-theme 'zenburn t)
#+end_src

** Scroll conservatively

When point goes outside the window, Emacs usually recenters the buffer point.
I'm not crazy about that. This changes scrolling behavior to only scroll as far
as point goes.

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

* Set personal information
** Who am I? Where am I?

#+begin_src emacs-lisp
  (setq user-full-name "Rémi Dulong"
        user-mail-address "remi.dulong@unine.ch")
#+end_src

* Programming environments

** Python

#+begin_src emacs-lisp
  (use-package python-mode)
#+end_src

Enable =elpy=. This provides automatic indentation, auto-completion, syntax
checking, etc.

#+begin_src emacs-lisp
  (use-package elpy)
  (elpy-enable)
#+end_src

Use =flycheck= for syntax checking:

#+begin_src emacs-lisp
  (add-hook 'elpy-mode-hook 'flycheck-mode)
#+end_src

** C/C++

Use clangd as a LSP server ([[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][Tutorial]])
Add helm.

#+begin_src emacs-lisp
(setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
    projectile hydra flycheck company avy which-key helm-xref dap-mode))

(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))

;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
(helm-mode)
(require 'helm-xref)
(define-key global-map [remap find-file] #'helm-find-files)
(define-key global-map [remap execute-extended-command] #'helm-M-x)
(define-key global-map [remap switch-to-buffer] #'helm-mini)

(which-key-mode)
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools)
  (yas-global-mode))


#+end_src

** Rust

Setup for Rust ([[https://robert.kra.hn/posts/rust-emacs-setup/][tutorial]])

#+begin_src emacs-lisp
      ;; rust-mode
      ;; https://github.com/rust-lang/rust-mode
      (use-package rust-mode
        :bind ( :map rust-mode-map
                     (("C-c C-t" . racer-describe)
                      ([?\t] .  company-indent-or-complete-common)))
        :config
        (progn
          ;; add flycheck support for rust (reads in cargo stuff)
          ;; https://github.com/flycheck/flycheck-rust
          (use-package flycheck-rust)

          ;; cargo-mode for all the cargo related operations
          ;; https://github.com/kwrooijen/cargo.el
          (use-package cargo
            :hook (rust-mode . cargo-minor-mode)
            :bind
            ("C-c C-c C-n" . cargo-process-new)) ;; global binding

            ;;; separedit ;; via https://github.com/twlz0ne/separedit.el
        ;; (use-package separedit
        ;;   :straight (separedit :type git :host github :repo "idcrook/separedit.el")
        ;;   :config
        ;;   (progn
        ;;     (define-key prog-mode-map (kbd "C-c '") #'separedit)
        ;;     (setq separedit-default-mode 'markdown-mode)))


        ;; racer-mode for getting IDE like features for rust-mode
        ;; https://github.com/racer-rust/emacs-racer
;;(use-package racer
;;  :hook (rust-mode . racer-mode)
;;  :config
;;  (progn
;;    ;; package does this by default ;; set racer rust source path environment variable
;;    ;; (setq racer-rust-src-path (getenv "RUST_SRC_PATH"))
;;    (defun my-racer-mode-hook ()
;;      (set (make-local-variable 'company-backends)
;;           '((company-capf company-files)))
;;      (setq company-minimum-prefix-length 1)
;;      (setq indent-tabs-mode nil))
;;
;;    (add-hook 'racer-mode-hook 'my-racer-mode-hook)
;;
;;    ;; enable company and eldoc minor modes in rust-mode (racer-mode)
;;    (add-hook 'racer-mode-hook #'company-mode)
;;    (add-hook 'racer-mode-hook #'eldoc-mode)))
;;
        (add-hook 'rust-mode-hook 'flycheck-mode)
        (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)

        ;; format rust buffers on save using rustfmt
        (add-hook 'before-save-hook
                  (lambda ()
                    (when (eq major-mode 'rust-mode)
                      (rust-format-buffer))))))

#+end_src

#+RESULTS:

* Editing settings

** Quickly visit Emacs configuration

I futz around with my dotfiles a lot. This binds =C-c e= to quickly open my
Emacs configuration file.

#+begin_src emacs-lisp
  (defun hrs/visit-emacs-config ()
    (interactive)
    (find-file "~/.emacs.d/configuration.org"))

  (global-set-key (kbd "C-c e") 'hrs/visit-emacs-config)
#+end_src

** Always kill current buffer

Assume that I always want to kill the current buffer when hitting =C-x k=.

#+begin_src emacs-lisp
  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+end_src

** Set up =helpful=

The =helpful= package provides, among other things, more context in Help
buffers.

#+begin_src emacs-lisp
  (use-package helpful)

  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

#+end_src

** Save my location within a file

Using =save-place-mode= saves the location of point for every file I visit. If I
close the file or close the editor, then later re-open it, point will be at the
last place I visited.

#+begin_src emacs-lisp
  (save-place-mode t)
#+end_src

** Always indent with spaces

Never use tabs. Tabs are the devil’s whitespace.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

** Switch and rebalance windows when splitting

When splitting a window, I invariably want to switch to the new window. This
makes that automatic.

#+begin_src emacs-lisp
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+end_src

* Backup files

#+begin_src emacs-lisp
;; make backup to a designated dir, mirroring the full path
(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/.emacs.d/backup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)

(setq make-backup-file-name-function 'my-backup-file-name)
#+end_src

* Terminal

Set default terminal to Zsh

#+begin_src emacs-lisp
  (setq explicit-shell-file-name "/bin/zsh")
#+end_src
* Org-mode

Including =org-tempo= restores the =<s=-style easy-templates that were
deprecated in Org 9.2.

I'd like to open =file:= links in Org with the applications defined in my
[[file:~/.dotfiles/email/.mailcap][mailcap]]. This clears the existing MIME mapping, parses my personal mailcap, and
tells Org to open those links with the mailcap-defined applications.

#+begin_src emacs-lisp
 (use-package org
   :config
   (require 'org-tempo)

   (add-hook 'org-mode-hook
             '(lambda ()
                (setq mailcap-mime-data '())
                (mailcap-parse-mailcap "~/.mailcap")
                (setq org-file-apps
                      '((remote . emacs)
                        ("mobi" . "fbreader %s")
                        (system . mailcap)
                        ("md" . emacs)
                        ("org" . emacs)
                        (t . mailcap))))))
;  (use-package org)
#+end_src


Force org mode files to be indented properly

#+begin_src emacs-lisp
  (setq org-startup-indented t)
#+end_src

Enable the /BIND/ keyword in org (to add local shortcuts in one org file, suc as todo list)
#+begin_src emacs-lisp
  (setq org-export-allow-bind-keywords t)
#+end_src


** Display preferences

I like to see an outline of pretty bullets instead of a list of asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+end_src

I like seeing a little downward-pointing arrow instead of the usual ellipsis
(=...=) that org displays when there's stuff under a header.

#+begin_src emacs-lisp
  (setq org-ellipsis "⤵")
#+end_src

This hides the slashes and stars that denote /emphasis/ and *bold* text.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

When editing a code snippet, use the current window rather than popping open a
new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Quickly insert a block of elisp:

#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

Don't indent newly expanded blocks, even if they're under a heading.

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

** Exporting

Allow export to markdown and beamer (for presentations).

#+begin_src emacs-lisp
  (require 'ox-md)
  (require 'ox-beamer)
#+end_src

Allow =babel= to evaluate Emacs lisp, Ruby, =ditaa=, Graphviz, or Gnuplot code.

#+begin_src emacs-lisp
  (use-package gnuplot)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (ditaa . t)
     (dot . t)
     (gnuplot . t)
     (org . t)
     (python . t)
     (latex . t)))

#+end_src

Re-use results that are already calculated.

#+begin_src emacs-lisp
  (setq org-export-babel-evaluate 'inline-only)
#+end_src



Don't ask before evaluating code blocks.

#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+end_src

Use =htmlize= to ensure that exported code blocks use syntax highlighting.

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

Associate the "dot" language with the =graphviz-dot= major mode.

#+begin_src emacs-lisp
  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))
#+end_src

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.

#+begin_src emacs-lisp
  (setq org-export-with-smart-quotes t)
#+end_src

**** Exporting to HTML

Don't include a footer with my contact and publishing information at the bottom
of every exported HTML document.

#+begin_src emacs-lisp
  (setq org-html-postamble nil)
#+end_src


Embed SVG files
(https://emacs.stackexchange.com/questions/29871/how-to-embed-svg-output-of-org-mode-src-block-as-inline-svg-in-html-export)


**** Exporting to PDF

I want to produce PDFs with syntax highlighting in the code. The best way to do
that seems to be with the =minted= package, but that package shells out to
=pygments= to do the actual work. =pdflatex= usually disallows shell commands;
this enables that.

#+begin_src emacs-lisp
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+end_src

Include the =minted= package in all of my LaTeX exports.

#+begin_src emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)
#+end_src

Better hyperref template

#+begin_src emacs-lisp
(customize-set-value 'org-latex-hyperref-template "
\\hypersetup{\n pdfauthor={%a},\n pdftitle={%t},\n pdfkeywords={%k},
 pdfsubject={%d},\n pdfcreator={%c},\n pdflang={%L},\n colorlinks=true}\n")
#+end_src

** TeX configuration

Add default libs imported in LaTeX source blocks.

#+begin_src emacs-lisp
  (setq org-latex-packages-alist
        (quote (("" "color" t)
                ("" "minted" t)
                ("" "parskip" t)
                ("" "tikz" t))))
#+end_src

I rarely write LaTeX directly any more, but I often export through it with
org-mode, so I'm keeping them together.

Automatically parse the file after loading it.

#+begin_src emacs-lisp
  (setq TeX-parse-self t)
#+end_src

Always use =pdflatex= when compiling LaTeX documents. I don't really have any
use for DVIs.

#+begin_src emacs-lisp
  (setq TeX-PDF-mode t)
#+end_src

Enable a minor mode for dealing with math (it adds a few useful keybindings),
and always treat the current file as the "main" file. That's intentional, since
I'm usually actually in an org document.

#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (setq TeX-master t)))
#+end_src

